{
  parserClass="cn.codetector.tablegenintellij.parser.TableGenParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="TableGen"
  psiImplClassSuffix="Impl"
  psiPackage="cn.codetector.tablegenintellij.psi"
  psiImplPackage="cn.codetector.tablegenintellij.psi.impl"

  elementTypeHolderClass="cn.codetector.tablegenintellij.psi.TableGenTypes"
  elementTypeClass="cn.codetector.tablegenintellij.psi.TableGenElementType"
  tokenTypeClass="cn.codetector.tablegenintellij.psi.TableGenTokenType"

  tokens = [
    LINE_BREAK="regexp:[\r\n]"
    WHITE_SPACE="regexp:\s+"

    // Keywords
    /*
    bit   bits      class   code         dag
    def   foreach   defm    field        in
    int   let       list    multiclass   string
    */

    KeywordDef="def"
    KeywordLet="let"
    KeywordIn="in"
    KeywordCode="code"
    KeywordDag="dag"
    KeywordField="field"
    KeywordInclude="include"
    KeywordDefm="defm"
    KeywordForEach="foreach"
    KeywordDefset="defset"
    KeywordDefVar="defvar"
    KeywordIf="if"
    KeywordThen="then"
    KeywordElse="else"

    KeywordClass="class"
    KeywordInt="int"
    KeywordString="string"
    KeywordList="list"
    KeywordBit="bit"
    KeywordBits="bits"
    KeywordMultiClass="multiclass"

    IDENTIFIER="regexp:[0-9]*[a-zA-Z_]([a-zA-Z_]|[0-9])*"
    VARNAME="regexp:[$][a-zA-Z_]([a-zA-Z_]|[0-9])*"

    BIN_INT="regexp:0b[0-1]+"
    HEX_INT="regexp:0x[0-9a-fA-F]+"
    DEC_INT="regexp:[0-9]+"

    STRING='regexp:"([^\n\r"]|\\n|\\")*"'
    CODE_FRAGMENT='regexp:\[\{([^}]*)}]'
    LINE_COMMENT="regexp://.*"
    BLOCK_COMMENT="regexp:/\*([^*]|\*+[^*/])*(\*+/)?"

    // condition has a different syntax, so it is defined searately
    CONDITION='!cond'
    BangAdd = "!add"
    BangAnd = "!and"
    BangCast = "!cast"
    BangCon = "!con"
    BangDag = "!dag"
    BangDiv = "!div"
    BangEmpty = "!empty"
    BangEq = "!eq"
    BangExists = "!exists"
    BangFilter = "!filter"
    BangFind = "!find"
    BangFoldl = "!foldl"
    BangForeach = "!foreach"
    BangGe = "!ge"
    BangGetdagop = "!getdagop"
    BangGt = "!gt"
    BangHead = "!head"
    BangIf = "!if"
    BangInterleave = "!interleave"
    BangIsa = "!isa"
    BangLe = "!le"
    BangListConcat = "!listconcat"
    BangListRemove = "!listremove"
    BangListSplat = "!listsplat"
    BangLogTwo = "!logtwo"
    BangLt = "!lt"
    BangMul = "!mul"
    BangNe = "!ne"
    BangNot = "!not"
    BangOr = "!or"
    BangRange = "!range"
    BangSetdagop = "!setdagop"
    BangShl = "!shl"
    BangSize = "!size"
    BangSra = "!sra"
    BangSrl = "!srl"
    BangStrConcat = "!strconcat"
    BangSub = "!sub"
    BangSubst = "!subst"
    BangSubstr = "!substr"
    BangTail = "!tail"
    BangToLower = "!tolower"
    BangToUpper = "!toupper"
    BangXor = "!xor"
  ]
}
tableGenFile ::= object*

private object ::= !<<eof>> (statement | includeDirective | preprocessorDirective) {pin=3}

statement ::= assertStmt | classStmt | defStmt | defmStmt | defSetStmt | defvarStmt | forEachStmt | ifStmt | letStmt |
                multiClassStmt

binaryInt ::= BIN_INT
decimalInteger ::= ["-"] DEC_INT
integer ::= binaryInt | decimalInteger | HEX_INT

value ::= simpleValue valueSuffix* ( "#" value )*

valueSuffix ::=  '{' rangeList '}'
               | '[' sliceElements ']'
               | '.' IDENTIFIER
sliceElements ::= (sliceElement ",")* sliceElement ","?
sliceElement ::= value
                | value "..." value
                | value "-" value
                | value integer
simpleValue ::= // SimpleValue | SimpleValue2
                CODE_FRAGMENT | STRING+ | integer   // TokInteger | TokString+ | TokCode | "true" | "false"
                // SimpleValue3
                | '?'
                // SimpleValue4
                | '{' valueList '}'
                // SimpleValue8
                | classID '<' valueListNE '>'
                // SimpleValue5
                | '[' valueList ']' ('<' type '>')?  // "[" ValueList "]" ["<" Type ">"]
                // SimpleValue6
                | '(' dagArg dagArgList? ')'
                // SimpleValue9
                | bangFunction
                | conditionFunction
                // SimpleValue7
                | IDENTIFIER                         // TokIdentifier

dagArg ::= value (':' VARNAME)? | VARNAME
dagArgList ::= dagArg (',' dagArg)*

valueList ::= valueListNE?
valueListNE ::= value (',' value)*

rangeList ::= rangePiece (',' rangePiece)*
rangePiece ::= integer '-' integer
             | integer '...' integer
             | integer integer
             | integer

bangFunction ::= bangOperator ('<' type '>')? '(' valueListNE ')'
bangOperator ::= BangAdd
                | BangAnd
                | BangCast
                | BangCon
                | BangDag
                | BangDiv
                | BangEmpty
                | BangEq
                | BangExists
                | BangFilter
                | BangFind
                | BangFoldl
                | BangForeach
                | BangGe
                | BangGetdagop
                | BangGt
                | BangHead
                | BangIf
                | BangInterleave
                | BangIsa
                | BangLe
                | BangListConcat
                | BangListRemove
                | BangListSplat
                | BangLogTwo
                | BangLt
                | BangMul
                | BangNe
                | BangNot
                | BangOr
                | BangRange
                | BangSetdagop
                | BangShl
                | BangSize
                | BangSra
                | BangSrl
                | BangStrConcat
                | BangSub
                | BangSubst
                | BangSubstr
                | BangTail
                | BangToLower
                | BangToUpper
                | BangXor

conditionFunction ::= condOperator '(' condClause (',' condClause)* ')'
condOperator ::= CONDITION
condClause ::= value ":" value

letStmt ::= KeywordLet letList KeywordIn "{" statement* "}"
            | KeywordLet letList KeywordIn statement
letList ::= letItem ("," letItem)*
letItem ::= IDENTIFIER [rangeList] "=" value

type    ::=  KeywordString | KeywordCode | KeywordBit | KeywordInt
            | KeywordDag
            | KeywordBits "<" integer ">"
            | KeywordList "<" type ">"
            | classID
classID ::=  IDENTIFIER
multiClassID ::= IDENTIFIER

classStmt ::= KeywordClass IDENTIFIER templateArgList? recordBody
templateArgList ::= "<" declaration ("," declaration)* ">"
declaration ::= ([KeywordField] type | KeywordCode) IDENTIFIER ("=" value)?

multiClassStmt ::= KeywordMultiClass IDENTIFIER templateArgList? parentClassList
                    "{" multiClassStatement+ "}"

multiClassStatement ::= assertStmt | defStmt | defmStmt | defvarStmt | forEachStmt | ifStmt | letStmt

recordBody      ::=  parentClassList body
parentClassList   ::=  (":" parentClassListNE)?
parentClassListNE ::=  classRef ("," classRef)*
classRef     ::=  (classID | multiClassID) ("<" valueList? ">")?

body     ::=  ";" | "{" bodyList "}"
bodyList ::=  bodyItem*
bodyItem ::=  declaration ";"
             | KeywordLet IDENTIFIER ["{" rangeList "}"] "=" value ";"
             | KeywordDefVar IDENTIFIER "=" value ";"
             | assertStmt

includeDirective ::= KeywordInclude STRING

preprocessorDirective ::= "#define" | "#ifdef" | "#ifndef"

defStmt ::= KeywordDef value? recordBody

defmStmt ::= KeywordDefm [value] parentClassList ";"

defvarStmt ::= KeywordDefVar IDENTIFIER "=" value ";"

assertStmt ::= KeywordAssert conditionFunction "," STRING ";"

ifStmt ::= KeywordIf value KeywordThen ifBody
            | KeywordIf value KeywordThen ifBody KeywordElse ifBody
ifBody ::= "{" statement* "}" | statement

forEachStmt ::= KeywordForEach forEachIterator KeywordIn "{" statement* "}"
                | KeywordForEach forEachIterator KeywordIn statement
forEachIterator ::= IDENTIFIER "=" ("{" rangeList "}" | rangePiece | value)

defSetStmt ::= KeywordDefset type IDENTIFIER "=" "{" statement* "}"