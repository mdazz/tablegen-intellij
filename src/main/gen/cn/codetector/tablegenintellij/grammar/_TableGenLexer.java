/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package cn.codetector.tablegenintellij.grammar;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static cn.codetector.tablegenintellij.psi.TableGenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/anakano/CLionProjects/tablegen-intellij/src/main/resources/cn/codetector/tablegenintellij/grammar/_TableGenLexer.flex</tt>
 */
public class _TableGenLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\2\3\1\2\22\0\1\4\1\45\1\12\1\0\1\7\5\0\1\24\1\0\1\21\2\0\1\23"+
    "\12\5\4\0\1\22\2\0\1\54\11\6\1\53\17\6\1\15\1\13\1\20\1\0\1\6\1\0\1\35\1\10"+
    "\1\33\1\25\1\26\1\27\1\36\1\42\1\32\2\6\1\30\1\40\1\14\1\34\1\46\1\50\1\41"+
    "\1\43\1\31\1\37\1\44\1\51\1\11\1\47\1\52\1\16\1\0\1\17\7\0\1\1\242\0\2\1\26"+
    "\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\4\3\1"+
    "\11\4\1\1\1\4\1\5\1\4\1\0\1\6\2\0"+
    "\1\7\1\10\10\4\1\11\1\12\4\4\20\0\1\4"+
    "\1\13\1\6\2\0\1\14\1\15\3\4\1\16\2\4"+
    "\1\17\5\4\1\0\1\20\5\0\1\21\2\0\1\22"+
    "\1\23\5\0\1\24\3\0\1\25\2\0\1\26\1\27"+
    "\11\0\1\4\1\30\2\0\1\31\1\0\1\10\1\32"+
    "\2\4\1\33\2\4\1\34\1\35\2\4\1\36\2\4"+
    "\1\37\1\40\1\41\1\42\14\0\1\43\1\44\1\0"+
    "\1\45\1\46\1\0\1\47\5\0\1\50\1\51\1\52"+
    "\1\53\1\4\3\0\1\31\2\0\2\4\1\54\2\4"+
    "\1\55\2\4\2\0\1\56\7\0\1\57\1\0\1\60"+
    "\1\61\2\0\1\62\2\0\1\63\1\0\1\4\2\0"+
    "\1\31\1\0\1\31\1\64\1\65\3\4\1\66\1\0"+
    "\1\67\1\0\1\70\11\0\1\71\2\0\1\72\1\4"+
    "\2\0\1\73\1\74\1\4\1\75\1\76\4\0\1\77"+
    "\6\0\1\100\2\4\1\101\3\0\1\102\1\103\4\0"+
    "\2\4\4\0\1\104\1\105\1\0\1\4\1\106\2\0"+
    "\1\107\1\0\1\110\1\4\1\111\1\112\1\113\2\4"+
    "\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u013b"+
    "\0\55\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519"+
    "\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\264\0\u0654"+
    "\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc"+
    "\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924"+
    "\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u013b\0\u0a32\0\u0a5f"+
    "\0\u0a8c\0\264\0\u0ab9\0\u0ae6\0\u0b13\0\264\0\u0b40\0\u0b6d"+
    "\0\264\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\55"+
    "\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\55\0\u0d89\0\u0db6"+
    "\0\55\0\55\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\55"+
    "\0\u0ec4\0\u0ef1\0\u0f1e\0\55\0\u0f4b\0\u0f78\0\u0fa5\0\55"+
    "\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d"+
    "\0\u113a\0\u1167\0\264\0\u1194\0\u11c1\0\u11ee\0\u121b\0\55"+
    "\0\264\0\u1248\0\u1275\0\264\0\u12a2\0\u12cf\0\264\0\264"+
    "\0\u12fc\0\u1329\0\264\0\u1356\0\u1383\0\55\0\55\0\55"+
    "\0\55\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be"+
    "\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\55\0\u15cc\0\u15f9"+
    "\0\55\0\55\0\u1626\0\55\0\u1653\0\u1680\0\u16ad\0\u16da"+
    "\0\u1707\0\u1734\0\55\0\55\0\55\0\u1761\0\u178e\0\u17bb"+
    "\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c\0\u18c9\0\264\0\u18f6"+
    "\0\u1923\0\264\0\u1950\0\u197d\0\u19aa\0\u19d7\0\55\0\u1a04"+
    "\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\55\0\u1b3f"+
    "\0\55\0\55\0\u1b6c\0\u1b99\0\55\0\u1bc6\0\u1bf3\0\55"+
    "\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\264"+
    "\0\264\0\u1d5b\0\u1d88\0\u1db5\0\264\0\u1de2\0\55\0\u1e0f"+
    "\0\55\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a"+
    "\0\u1f77\0\u1fa4\0\55\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u1cd4"+
    "\0\u1d2e\0\264\0\264\0\u2085\0\55\0\55\0\u20b2\0\u20df"+
    "\0\u210c\0\u2139\0\55\0\u2166\0\u2193\0\u21c0\0\u21ed\0\u221a"+
    "\0\u2247\0\55\0\u2274\0\u22a1\0\55\0\u22ce\0\u22fb\0\u2328"+
    "\0\55\0\55\0\u2355\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436"+
    "\0\u2463\0\u2490\0\u24bd\0\u24ea\0\55\0\55\0\u2517\0\u2544"+
    "\0\264\0\u2571\0\u259e\0\55\0\u25cb\0\55\0\u25f8\0\55"+
    "\0\55\0\55\0\u2625\0\u2652\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\3\3\1\4\1\5\1\6\1\7\1\5\1\10"+
    "\1\2\1\5\1\11\5\2\1\12\1\2\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\4\5\1\22\2\5"+
    "\1\23\1\5\1\24\5\5\1\25\1\5\57\0\3\3"+
    "\55\0\1\4\1\5\1\0\2\5\2\0\1\5\10\0"+
    "\20\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\10\0\20\5\1\0\7\5\6\0\1\26\1\0"+
    "\2\26\2\0\1\26\10\0\20\26\1\0\7\26\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\5\5\1\27"+
    "\12\5\1\0\7\5\2\30\1\0\7\30\1\31\1\32"+
    "\41\30\16\0\1\33\61\0\1\34\1\35\35\0\2\5"+
    "\1\0\2\5\2\0\1\5\10\0\1\5\1\36\6\5"+
    "\1\37\7\5\1\0\7\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\10\0\3\5\1\40\14\5\1\0\7\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\10\0\5\5"+
    "\1\41\1\5\1\42\10\5\1\0\7\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\10\0\1\5\1\43\3\5"+
    "\1\44\12\5\1\0\7\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\10\0\15\5\1\45\2\5\1\0\7\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\46\10\0\2\5"+
    "\1\47\15\5\1\0\7\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\10\0\3\5\1\50\3\5\1\51\10\5"+
    "\1\0\7\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\10\0\12\5\1\52\5\5\1\0\7\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\10\0\4\5\1\53\13\5"+
    "\1\0\7\5\11\0\1\54\2\0\1\55\10\0\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\0\1\70\1\71\1\72\1\73\16\0\2\5"+
    "\1\0\2\5\2\0\1\5\10\0\1\5\1\74\16\5"+
    "\1\0\7\5\5\0\2\26\1\0\2\26\2\0\1\26"+
    "\10\0\20\26\1\0\7\26\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\10\0\4\5\1\75\13\5\1\0\7\5"+
    "\2\30\1\0\7\30\1\76\1\32\41\30\17\33\1\77"+
    "\35\33\1\34\3\0\51\34\24\35\1\100\30\35\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\2\5\1\101"+
    "\15\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\10\0\11\5\1\102\6\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\16\5\1\103"+
    "\1\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\10\0\1\5\1\104\16\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\14\5\1\105"+
    "\3\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\10\0\4\5\1\106\13\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\16\5\1\107"+
    "\1\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\10\0\1\5\1\110\16\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\4\5\1\111"+
    "\1\5\1\112\11\5\1\0\7\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\10\0\10\5\1\113\7\5\1\0"+
    "\7\5\5\0\2\5\1\0\2\5\2\0\1\5\10\0"+
    "\1\114\17\5\1\0\7\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\10\0\3\5\1\115\14\5\1\0\7\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\10\0\14\5"+
    "\1\116\3\5\1\0\7\5\34\0\1\117\46\0\1\120"+
    "\5\0\1\121\52\0\1\122\2\0\1\123\30\0\1\124"+
    "\26\0\1\125\7\0\1\126\36\0\1\127\1\0\1\130"+
    "\46\0\1\131\2\0\1\132\1\133\1\0\1\134\54\0"+
    "\1\135\1\136\33\0\1\137\12\0\1\140\13\0\1\141"+
    "\45\0\1\142\1\143\60\0\1\144\27\0\1\145\10\0"+
    "\1\146\55\0\1\147\2\0\1\150\62\0\1\151\52\0"+
    "\1\152\45\0\1\153\54\0\1\154\2\0\1\155\1\156"+
    "\4\0\1\157\1\0\1\160\1\161\17\0\2\5\1\0"+
    "\2\5\2\0\1\5\10\0\20\5\1\0\1\5\1\162"+
    "\5\5\5\0\2\5\1\0\2\5\2\0\1\5\10\0"+
    "\16\5\1\163\1\5\1\0\7\5\17\164\1\165\1\166"+
    "\1\164\1\167\32\164\23\35\1\170\1\100\30\35\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\13\5\1\171"+
    "\2\5\1\172\1\173\1\0\7\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\10\0\1\5\1\174\16\5\1\0"+
    "\7\5\5\0\2\5\1\0\2\5\2\0\1\5\10\0"+
    "\3\5\1\175\14\5\1\0\7\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\10\0\1\5\1\176\16\5\1\0"+
    "\7\5\5\0\2\5\1\0\2\5\2\0\1\5\10\0"+
    "\4\5\1\177\13\5\1\0\7\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\200\10\0\20\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\3\5\1\201"+
    "\14\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\10\0\16\5\1\202\1\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\1\5\1\203"+
    "\16\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\10\0\4\5\1\204\13\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\5\5\1\205"+
    "\12\5\1\0\7\5\41\0\1\206\44\0\1\207\67\0"+
    "\1\210\46\0\1\211\50\0\1\212\70\0\1\213\22\0"+
    "\1\214\13\0\1\215\54\0\1\216\10\0\1\217\56\0"+
    "\1\220\47\0\1\221\46\0\1\222\6\0\1\223\47\0"+
    "\1\224\53\0\1\225\60\0\1\226\33\0\1\227\103\0"+
    "\1\230\36\0\1\231\54\0\1\232\60\0\1\233\53\0"+
    "\1\234\40\0\1\235\75\0\1\236\50\0\1\237\64\0"+
    "\1\240\65\0\1\241\12\0\1\242\74\0\1\243\4\0"+
    "\1\244\47\0\1\245\31\0\2\5\1\0\2\5\2\0"+
    "\1\5\10\0\20\5\1\0\3\5\1\246\3\5\17\247"+
    "\1\250\1\251\1\247\1\0\32\247\17\164\1\165\1\252"+
    "\1\164\1\253\32\164\17\251\1\254\1\251\1\247\1\0"+
    "\32\251\20\0\1\33\41\0\2\5\1\0\2\5\2\0"+
    "\1\5\10\0\1\5\1\255\16\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\10\5\1\256"+
    "\7\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\10\0\1\257\17\5\1\0\7\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\10\0\10\5\1\260\7\5"+
    "\1\0\7\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\10\0\12\5\1\261\5\5\1\0\7\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\10\0\16\5\1\262\1\5"+
    "\1\0\7\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\10\0\5\5\1\263\12\5\1\0\7\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\264\10\0\20\5\1\0\7\5"+
    "\43\0\1\265\42\0\1\266\50\0\1\267\60\0\1\270"+
    "\50\0\1\271\55\0\1\272\57\0\1\273\54\0\1\274"+
    "\57\0\1\275\66\0\1\276\36\0\1\277\52\0\1\300"+
    "\53\0\1\301\60\0\1\302\50\0\1\303\65\0\1\304"+
    "\43\0\1\305\54\0\1\306\62\0\1\307\47\0\1\310"+
    "\71\0\1\311\16\0\2\5\1\0\2\5\2\0\1\5"+
    "\10\0\7\5\1\312\10\5\1\0\7\5\17\247\1\250"+
    "\2\247\1\0\32\247\17\313\1\314\1\315\34\313\17\251"+
    "\1\165\2\251\1\33\51\251\1\254\1\251\2\247\32\251"+
    "\20\0\1\251\34\0\17\253\1\316\1\317\34\253\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\4\5\1\320"+
    "\13\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\10\0\14\5\1\321\3\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\6\5\1\322"+
    "\11\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\10\0\1\323\17\5\1\0\7\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\10\0\6\5\1\324\11\5"+
    "\1\0\7\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\10\0\11\5\1\325\6\5\1\0\7\5\31\0\1\326"+
    "\72\0\1\327\33\0\1\330\56\0\1\331\61\0\1\332"+
    "\52\0\1\333\5\0\1\334\1\0\1\335\62\0\1\336"+
    "\54\0\1\337\51\0\1\340\47\0\1\341\50\0\1\342"+
    "\45\0\1\343\63\0\1\344\53\0\1\345\51\0\1\346"+
    "\30\0\2\5\1\0\2\5\2\0\1\5\10\0\14\5"+
    "\1\347\3\5\1\0\7\5\20\0\1\247\34\0\17\313"+
    "\1\314\1\350\34\313\17\247\1\314\35\247\17\253\1\316"+
    "\1\351\34\253\17\251\1\316\1\251\2\247\32\251\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\15\5\1\352"+
    "\2\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\10\0\1\5\1\353\16\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\3\5\1\354"+
    "\14\5\1\0\7\5\43\0\1\355\52\0\1\356\46\0"+
    "\1\357\55\0\1\360\46\0\1\361\74\0\1\362\42\0"+
    "\1\363\46\0\1\364\54\0\1\365\56\0\1\366\62\0"+
    "\1\367\54\0\1\370\32\0\1\371\101\0\1\372\20\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\1\373\17\5"+
    "\1\0\7\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\10\0\10\5\1\374\7\5\1\0\7\5\42\0\1\375"+
    "\26\0\1\376\100\0\1\377\44\0\1\u0100\65\0\1\u0101"+
    "\54\0\1\u0102\41\0\1\u0103\62\0\1\u0104\54\0\1\u0105"+
    "\53\0\1\u0106\26\0\2\5\1\0\2\5\2\0\1\5"+
    "\10\0\20\5\1\0\6\5\1\u0107\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\10\0\16\5\1\u0108\1\5\1\0"+
    "\7\5\33\0\1\u0109\55\0\1\u010a\55\0\1\u010b\54\0"+
    "\1\u010c\65\0\1\u010d\54\0\1\u010e\43\0\1\u010f\24\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\16\5\1\u0110"+
    "\1\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\10\0\16\5\1\u0111\1\5\1\0\7\5\35\0"+
    "\1\u0112\63\0\1\u0113\41\0\1\u0114\67\0\1\u0115\41\0"+
    "\1\u0116\30\0\2\5\1\0\2\5\2\0\1\5\10\0"+
    "\16\5\1\u0117\1\5\1\0\7\5\31\0\1\u0118\51\0"+
    "\1\u0119\54\0\1\u011a\33\0\2\5\1\0\2\5\2\0"+
    "\1\5\10\0\1\5\1\u011b\16\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\10\0\14\5\1\u011c"+
    "\3\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\10\0\4\5\1\u011d\13\5\1\0\7\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9855];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\1\0\1\11\2\0\20\1\20\0"+
    "\3\1\2\0\16\1\1\0\1\11\5\0\1\11\2\0"+
    "\2\11\5\0\1\11\3\0\1\11\2\0\1\1\1\11"+
    "\11\0\2\1\2\0\1\1\1\0\1\11\15\1\4\11"+
    "\14\0\1\11\1\1\1\0\2\11\1\0\1\11\5\0"+
    "\1\1\3\11\1\1\3\0\1\1\2\0\10\1\2\0"+
    "\1\11\7\0\1\11\1\0\2\11\2\0\1\11\2\0"+
    "\1\11\1\0\1\1\2\0\1\1\1\0\7\1\1\0"+
    "\1\11\1\0\1\11\11\0\1\11\2\0\2\1\2\0"+
    "\3\1\2\11\4\0\1\11\6\0\1\11\2\1\1\11"+
    "\3\0\2\11\4\0\2\1\4\0\2\11\1\0\2\1"+
    "\2\0\1\11\1\0\1\11\1\1\3\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _TableGenLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TableGenLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 77: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 78: break;
          case 3: 
            { return DEC_INT;
            } 
            // fall through
          case 79: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 80: break;
          case 5: 
            { return VARNAME;
            } 
            // fall through
          case 81: break;
          case 6: 
            { return STRING;
            } 
            // fall through
          case 82: break;
          case 7: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 83: break;
          case 8: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 84: break;
          case 9: 
            { return KEYWORDIN;
            } 
            // fall through
          case 85: break;
          case 10: 
            { return KEYWORDIF;
            } 
            // fall through
          case 86: break;
          case 11: 
            { return KEYWORDBIT;
            } 
            // fall through
          case 87: break;
          case 12: 
            { return KEYWORDDEF;
            } 
            // fall through
          case 88: break;
          case 13: 
            { return KEYWORDDAG;
            } 
            // fall through
          case 89: break;
          case 14: 
            { return KEYWORDLET;
            } 
            // fall through
          case 90: break;
          case 15: 
            { return KEYWORDINT;
            } 
            // fall through
          case 91: break;
          case 16: 
            { return BANGNE;
            } 
            // fall through
          case 92: break;
          case 17: 
            { return BANGEQ;
            } 
            // fall through
          case 93: break;
          case 18: 
            { return BANGLE;
            } 
            // fall through
          case 94: break;
          case 19: 
            { return BANGLT;
            } 
            // fall through
          case 95: break;
          case 20: 
            { return BANGIF;
            } 
            // fall through
          case 96: break;
          case 21: 
            { return BANGOR;
            } 
            // fall through
          case 97: break;
          case 22: 
            { return BANGGE;
            } 
            // fall through
          case 98: break;
          case 23: 
            { return BANGGT;
            } 
            // fall through
          case 99: break;
          case 24: 
            { return KEYWORDBITS;
            } 
            // fall through
          case 100: break;
          case 25: 
            { return CODE_FRAGMENT;
            } 
            // fall through
          case 101: break;
          case 26: 
            { return KEYWORDDEFM;
            } 
            // fall through
          case 102: break;
          case 27: 
            { return KEYWORDELSE;
            } 
            // fall through
          case 103: break;
          case 28: 
            { return KEYWORDLIST;
            } 
            // fall through
          case 104: break;
          case 29: 
            { return KEYWORDTHEN;
            } 
            // fall through
          case 105: break;
          case 30: 
            { return KEYWORDCODE;
            } 
            // fall through
          case 106: break;
          case 31: 
            { return BANGXOR;
            } 
            // fall through
          case 107: break;
          case 32: 
            { return BANGNOT;
            } 
            // fall through
          case 108: break;
          case 33: 
            { return BANGDIV;
            } 
            // fall through
          case 109: break;
          case 34: 
            { return BANGDAG;
            } 
            // fall through
          case 110: break;
          case 35: 
            { return BANGISA;
            } 
            // fall through
          case 111: break;
          case 36: 
            { return BANGCON;
            } 
            // fall through
          case 112: break;
          case 37: 
            { return BANGAND;
            } 
            // fall through
          case 113: break;
          case 38: 
            { return BANGADD;
            } 
            // fall through
          case 114: break;
          case 39: 
            { return BANGMUL;
            } 
            // fall through
          case 115: break;
          case 40: 
            { return BANGSUB;
            } 
            // fall through
          case 116: break;
          case 41: 
            { return BANGSRL;
            } 
            // fall through
          case 117: break;
          case 42: 
            { return BANGSRA;
            } 
            // fall through
          case 118: break;
          case 43: 
            { return BANGSHL;
            } 
            // fall through
          case 119: break;
          case 44: 
            { return KEYWORDFIELD;
            } 
            // fall through
          case 120: break;
          case 45: 
            { return KEYWORDCLASS;
            } 
            // fall through
          case 121: break;
          case 46: 
            { return BANGFIND;
            } 
            // fall through
          case 122: break;
          case 47: 
            { return BANGTAIL;
            } 
            // fall through
          case 123: break;
          case 48: 
            { return CONDITION;
            } 
            // fall through
          case 124: break;
          case 49: 
            { return BANGCAST;
            } 
            // fall through
          case 125: break;
          case 50: 
            { return BANGHEAD;
            } 
            // fall through
          case 126: break;
          case 51: 
            { return BANGSIZE;
            } 
            // fall through
          case 127: break;
          case 52: 
            { return KEYWORDDEFSET;
            } 
            // fall through
          case 128: break;
          case 53: 
            { return KEYWORDDEFVAR;
            } 
            // fall through
          case 129: break;
          case 54: 
            { return KEYWORDSTRING;
            } 
            // fall through
          case 130: break;
          case 55: 
            { return BANGEMPTY;
            } 
            // fall through
          case 131: break;
          case 56: 
            { return BANGFOLDL;
            } 
            // fall through
          case 132: break;
          case 57: 
            { return BANGRANGE;
            } 
            // fall through
          case 133: break;
          case 58: 
            { return BANGSUBST;
            } 
            // fall through
          case 134: break;
          case 59: 
            { return KEYWORDFOREACH;
            } 
            // fall through
          case 135: break;
          case 60: 
            { return KEYWORDINCLUDE;
            } 
            // fall through
          case 136: break;
          case 61: 
            { return BANGEXISTS;
            } 
            // fall through
          case 137: break;
          case 62: 
            { return BANGFILTER;
            } 
            // fall through
          case 138: break;
          case 63: 
            { return BANGLOGTWO;
            } 
            // fall through
          case 139: break;
          case 64: 
            { return BANGSUBSTR;
            } 
            // fall through
          case 140: break;
          case 65: 
            { return BANGFOREACH;
            } 
            // fall through
          case 141: break;
          case 66: 
            { return BANGTOLOWER;
            } 
            // fall through
          case 142: break;
          case 67: 
            { return BANGTOUPPER;
            } 
            // fall through
          case 143: break;
          case 68: 
            { return BANGGETDAGOP;
            } 
            // fall through
          case 144: break;
          case 69: 
            { return BANGSETDAGOP;
            } 
            // fall through
          case 145: break;
          case 70: 
            { return KEYWORDMULTICLASS;
            } 
            // fall through
          case 146: break;
          case 71: 
            { return BANGLISTSPLAT;
            } 
            // fall through
          case 147: break;
          case 72: 
            { return BANGSTRCONCAT;
            } 
            // fall through
          case 148: break;
          case 73: 
            { return BANGLISTCONCAT;
            } 
            // fall through
          case 149: break;
          case 74: 
            { return BANGLISTREMOVE;
            } 
            // fall through
          case 150: break;
          case 75: 
            { return BANGINTERLEAVE;
            } 
            // fall through
          case 151: break;
          case 76: 
            { return KEYWORDASSERT;
            } 
            // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
