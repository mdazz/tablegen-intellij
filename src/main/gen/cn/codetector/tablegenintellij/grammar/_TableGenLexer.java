/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package cn.codetector.tablegenintellij.grammar;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static cn.codetector.tablegenintellij.psi.TableGenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/anakano/CLionProjects/tablegen-intellij/src/main/resources/cn/codetector/tablegenintellij/grammar/_TableGenLexer.flex</tt>
 */
public class _TableGenLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\2\3\1\2\22\0\1\4\1\43\1\12\1\0\1\7\5\0\1\22\4\0\1\21\12\5\7"+
    "\0\1\52\11\6\1\51\17\6\1\15\1\13\1\20\1\0\1\6\1\0\1\33\1\10\1\31\1\23\1\24"+
    "\1\25\1\34\1\40\1\30\2\6\1\26\1\36\1\14\1\32\1\44\1\46\1\37\1\41\1\27\1\35"+
    "\1\42\1\47\1\11\1\45\1\50\1\16\1\0\1\17\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\4\3\1"+
    "\11\4\1\1\1\4\1\5\1\4\1\0\1\6\2\0"+
    "\1\7\1\10\10\4\1\11\1\12\4\4\20\0\1\4"+
    "\1\13\1\6\2\0\1\14\1\15\3\4\1\16\2\4"+
    "\1\17\5\4\1\0\1\20\5\0\1\21\2\0\1\22"+
    "\1\23\5\0\1\24\3\0\1\25\2\0\1\26\1\27"+
    "\11\0\1\4\1\30\1\31\1\10\1\32\2\4\1\33"+
    "\2\4\1\34\1\35\2\4\1\36\2\4\1\37\1\40"+
    "\1\41\1\42\14\0\1\43\1\44\1\0\1\45\1\46"+
    "\1\0\1\47\5\0\1\50\1\51\1\52\1\53\3\4"+
    "\1\54\2\4\1\55\2\4\2\0\1\56\7\0\1\57"+
    "\1\0\1\60\1\61\2\0\1\62\2\0\1\63\1\0"+
    "\1\4\1\64\1\65\3\4\1\66\1\0\1\67\1\0"+
    "\1\70\11\0\1\71\2\0\1\72\1\4\1\73\1\74"+
    "\1\4\1\75\1\76\4\0\1\77\6\0\1\100\2\4"+
    "\1\101\3\0\1\102\1\103\4\0\2\4\4\0\1\104"+
    "\1\105\1\0\1\4\1\106\2\0\1\107\1\0\1\110"+
    "\1\4\1\111\1\112\1\113\2\4\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u012d"+
    "\0\53\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df"+
    "\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\254\0\u060c"+
    "\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764"+
    "\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc"+
    "\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u012d\0\u09be\0\u09e9"+
    "\0\u0a14\0\254\0\u0a3f\0\u0a6a\0\u0a95\0\254\0\u0ac0\0\u0aeb"+
    "\0\254\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\53"+
    "\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\53\0\u0cef\0\u0d1a"+
    "\0\53\0\53\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\53"+
    "\0\u0e1c\0\u0e47\0\u0e72\0\53\0\u0e9d\0\u0ec8\0\u0ef3\0\53"+
    "\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b"+
    "\0\u1076\0\u10a1\0\254\0\53\0\53\0\254\0\u10cc\0\u10f7"+
    "\0\254\0\u1122\0\u114d\0\254\0\254\0\u1178\0\u11a3\0\254"+
    "\0\u11ce\0\u11f9\0\53\0\53\0\53\0\53\0\u1224\0\u124f"+
    "\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7"+
    "\0\u13d2\0\u13fd\0\53\0\u1428\0\u1453\0\53\0\53\0\u147e"+
    "\0\53\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580\0\53"+
    "\0\53\0\53\0\u15ab\0\u15d6\0\u1601\0\254\0\u162c\0\u1657"+
    "\0\254\0\u1682\0\u16ad\0\u16d8\0\u1703\0\53\0\u172e\0\u1759"+
    "\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\53\0\u185b\0\53"+
    "\0\53\0\u1886\0\u18b1\0\53\0\u18dc\0\u1907\0\53\0\u1932"+
    "\0\u195d\0\254\0\254\0\u1988\0\u19b3\0\u19de\0\254\0\u1a09"+
    "\0\53\0\u1a34\0\53\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b"+
    "\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\53\0\u1be2\0\u1c0d\0\u1c38"+
    "\0\u1c63\0\254\0\254\0\u1c8e\0\53\0\53\0\u1cb9\0\u1ce4"+
    "\0\u1d0f\0\u1d3a\0\53\0\u1d65\0\u1d90\0\u1dbb\0\u1de6\0\u1e11"+
    "\0\u1e3c\0\53\0\u1e67\0\u1e92\0\53\0\u1ebd\0\u1ee8\0\u1f13"+
    "\0\53\0\53\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf\0\u1fea\0\u2015"+
    "\0\u2040\0\u206b\0\u2096\0\u20c1\0\53\0\53\0\u20ec\0\u2117"+
    "\0\254\0\u2142\0\u216d\0\53\0\u2198\0\53\0\u21c3\0\53"+
    "\0\53\0\53\0\u21ee\0\u2219\0\254";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\3\3\1\4\1\5\1\6\1\7\1\5\1\10"+
    "\1\2\1\5\1\11\3\2\1\12\1\2\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\4\5\1\22\2\5"+
    "\1\23\1\5\1\24\5\5\1\25\1\5\55\0\3\3"+
    "\53\0\1\4\1\5\1\0\2\5\2\0\1\5\6\0"+
    "\20\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\6\0\20\5\1\0\7\5\6\0\1\26\1\0"+
    "\2\26\2\0\1\26\6\0\20\26\1\0\7\26\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\6\0\5\5\1\27"+
    "\12\5\1\0\7\5\2\30\1\0\7\30\1\31\1\32"+
    "\37\30\16\0\1\33\55\0\1\34\1\35\35\0\2\5"+
    "\1\0\2\5\2\0\1\5\6\0\1\5\1\36\6\5"+
    "\1\37\7\5\1\0\7\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\6\0\3\5\1\40\14\5\1\0\7\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\6\0\5\5"+
    "\1\41\1\5\1\42\10\5\1\0\7\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\6\0\1\5\1\43\3\5"+
    "\1\44\12\5\1\0\7\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\6\0\15\5\1\45\2\5\1\0\7\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\46\6\0\2\5"+
    "\1\47\15\5\1\0\7\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\6\0\3\5\1\50\3\5\1\51\10\5"+
    "\1\0\7\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\6\0\12\5\1\52\5\5\1\0\7\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\6\0\4\5\1\53\13\5"+
    "\1\0\7\5\11\0\1\54\2\0\1\55\6\0\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\0\1\70\1\71\1\72\1\73\16\0\2\5"+
    "\1\0\2\5\2\0\1\5\6\0\1\5\1\74\16\5"+
    "\1\0\7\5\5\0\2\26\1\0\2\26\2\0\1\26"+
    "\6\0\20\26\1\0\7\26\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\6\0\4\5\1\75\13\5\1\0\7\5"+
    "\2\30\1\0\7\30\1\76\1\32\37\30\17\33\1\77"+
    "\33\33\1\34\3\0\47\34\22\35\1\100\30\35\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\6\0\2\5\1\101"+
    "\15\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\6\0\11\5\1\102\6\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\6\0\16\5\1\103"+
    "\1\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\6\0\1\5\1\104\16\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\6\0\14\5\1\105"+
    "\3\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\6\0\4\5\1\106\13\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\6\0\16\5\1\107"+
    "\1\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\6\0\1\5\1\110\16\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\6\0\4\5\1\111"+
    "\1\5\1\112\11\5\1\0\7\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\6\0\10\5\1\113\7\5\1\0"+
    "\7\5\5\0\2\5\1\0\2\5\2\0\1\5\6\0"+
    "\1\114\17\5\1\0\7\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\6\0\3\5\1\115\14\5\1\0\7\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\6\0\14\5"+
    "\1\116\3\5\1\0\7\5\32\0\1\117\44\0\1\120"+
    "\5\0\1\121\50\0\1\122\2\0\1\123\30\0\1\124"+
    "\24\0\1\125\7\0\1\126\34\0\1\127\1\0\1\130"+
    "\44\0\1\131\2\0\1\132\1\133\1\0\1\134\52\0"+
    "\1\135\1\136\33\0\1\137\10\0\1\140\13\0\1\141"+
    "\43\0\1\142\1\143\56\0\1\144\27\0\1\145\6\0"+
    "\1\146\53\0\1\147\2\0\1\150\60\0\1\151\50\0"+
    "\1\152\43\0\1\153\52\0\1\154\2\0\1\155\1\156"+
    "\4\0\1\157\1\0\1\160\1\161\17\0\2\5\1\0"+
    "\2\5\2\0\1\5\6\0\20\5\1\0\1\5\1\162"+
    "\5\5\5\0\2\5\1\0\2\5\2\0\1\5\6\0"+
    "\16\5\1\163\1\5\1\0\7\5\20\0\1\164\32\0"+
    "\21\35\1\165\1\100\30\35\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\6\0\13\5\1\166\2\5\1\167\1\170"+
    "\1\0\7\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\6\0\1\5\1\171\16\5\1\0\7\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\6\0\3\5\1\172\14\5"+
    "\1\0\7\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\6\0\1\5\1\173\16\5\1\0\7\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\6\0\4\5\1\174\13\5"+
    "\1\0\7\5\5\0\2\5\1\0\2\5\2\0\1\175"+
    "\6\0\20\5\1\0\7\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\6\0\3\5\1\176\14\5\1\0\7\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\6\0\16\5"+
    "\1\177\1\5\1\0\7\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\6\0\1\5\1\200\16\5\1\0\7\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\6\0\4\5"+
    "\1\201\13\5\1\0\7\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\6\0\5\5\1\202\12\5\1\0\7\5"+
    "\37\0\1\203\42\0\1\204\65\0\1\205\44\0\1\206"+
    "\46\0\1\207\66\0\1\210\22\0\1\211\11\0\1\212"+
    "\52\0\1\213\10\0\1\214\54\0\1\215\45\0\1\216"+
    "\44\0\1\217\6\0\1\220\45\0\1\221\51\0\1\222"+
    "\56\0\1\223\33\0\1\224\77\0\1\225\34\0\1\226"+
    "\52\0\1\227\56\0\1\230\51\0\1\231\40\0\1\232"+
    "\71\0\1\233\46\0\1\234\62\0\1\235\63\0\1\236"+
    "\12\0\1\237\70\0\1\240\4\0\1\241\45\0\1\242"+
    "\31\0\2\5\1\0\2\5\2\0\1\5\6\0\20\5"+
    "\1\0\3\5\1\243\3\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\6\0\1\5\1\244\16\5\1\0\7\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\6\0\10\5"+
    "\1\245\7\5\1\0\7\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\6\0\1\246\17\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\6\0\10\5\1\247"+
    "\7\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\6\0\12\5\1\250\5\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\6\0\16\5\1\251"+
    "\1\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\6\0\5\5\1\252\12\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\253\6\0\20\5\1\0"+
    "\7\5\41\0\1\254\40\0\1\255\46\0\1\256\56\0"+
    "\1\257\46\0\1\260\53\0\1\261\55\0\1\262\52\0"+
    "\1\263\55\0\1\264\64\0\1\265\34\0\1\266\50\0"+
    "\1\267\51\0\1\270\56\0\1\271\46\0\1\272\63\0"+
    "\1\273\41\0\1\274\52\0\1\275\60\0\1\276\45\0"+
    "\1\277\67\0\1\300\16\0\2\5\1\0\2\5\2\0"+
    "\1\5\6\0\7\5\1\301\10\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\6\0\4\5\1\302"+
    "\13\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\6\0\14\5\1\303\3\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\6\0\6\5\1\304"+
    "\11\5\1\0\7\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\6\0\1\305\17\5\1\0\7\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\6\0\6\5\1\306\11\5"+
    "\1\0\7\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\6\0\11\5\1\307\6\5\1\0\7\5\27\0\1\310"+
    "\70\0\1\311\31\0\1\312\54\0\1\313\57\0\1\314"+
    "\50\0\1\315\5\0\1\316\1\0\1\317\60\0\1\320"+
    "\52\0\1\321\47\0\1\322\45\0\1\323\46\0\1\324"+
    "\43\0\1\325\61\0\1\326\51\0\1\327\47\0\1\330"+
    "\30\0\2\5\1\0\2\5\2\0\1\5\6\0\14\5"+
    "\1\331\3\5\1\0\7\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\6\0\15\5\1\332\2\5\1\0\7\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\6\0\1\5"+
    "\1\333\16\5\1\0\7\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\6\0\3\5\1\334\14\5\1\0\7\5"+
    "\41\0\1\335\50\0\1\336\44\0\1\337\53\0\1\340"+
    "\44\0\1\341\72\0\1\342\40\0\1\343\44\0\1\344"+
    "\52\0\1\345\54\0\1\346\60\0\1\347\52\0\1\350"+
    "\32\0\1\351\75\0\1\352\20\0\2\5\1\0\2\5"+
    "\2\0\1\5\6\0\1\353\17\5\1\0\7\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\6\0\10\5\1\354"+
    "\7\5\1\0\7\5\40\0\1\355\26\0\1\356\74\0"+
    "\1\357\42\0\1\360\63\0\1\361\52\0\1\362\37\0"+
    "\1\363\60\0\1\364\52\0\1\365\51\0\1\366\26\0"+
    "\2\5\1\0\2\5\2\0\1\5\6\0\20\5\1\0"+
    "\6\5\1\367\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\6\0\16\5\1\370\1\5\1\0\7\5\31\0\1\371"+
    "\53\0\1\372\53\0\1\373\52\0\1\374\63\0\1\375"+
    "\52\0\1\376\41\0\1\377\24\0\2\5\1\0\2\5"+
    "\2\0\1\5\6\0\16\5\1\u0100\1\5\1\0\7\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\6\0\16\5"+
    "\1\u0101\1\5\1\0\7\5\33\0\1\u0102\61\0\1\u0103"+
    "\37\0\1\u0104\65\0\1\u0105\37\0\1\u0106\30\0\2\5"+
    "\1\0\2\5\2\0\1\5\6\0\16\5\1\u0107\1\5"+
    "\1\0\7\5\27\0\1\u0108\47\0\1\u0109\52\0\1\u010a"+
    "\33\0\2\5\1\0\2\5\2\0\1\5\6\0\1\5"+
    "\1\u010b\16\5\1\0\7\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\6\0\14\5\1\u010c\3\5\1\0\7\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\6\0\4\5"+
    "\1\u010d\13\5\1\0\7\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8772];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\1\0\1\11\2\0\20\1\20\0"+
    "\3\1\2\0\16\1\1\0\1\11\5\0\1\11\2\0"+
    "\2\11\5\0\1\11\3\0\1\11\2\0\1\1\1\11"+
    "\11\0\2\1\2\11\15\1\4\11\14\0\1\11\1\1"+
    "\1\0\2\11\1\0\1\11\5\0\1\1\3\11\11\1"+
    "\2\0\1\11\7\0\1\11\1\0\2\11\2\0\1\11"+
    "\2\0\1\11\1\0\7\1\1\0\1\11\1\0\1\11"+
    "\11\0\1\11\2\0\5\1\2\11\4\0\1\11\6\0"+
    "\1\11\2\1\1\11\3\0\2\11\4\0\2\1\4\0"+
    "\2\11\1\0\2\1\2\0\1\11\1\0\1\11\1\1"+
    "\3\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _TableGenLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TableGenLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 77: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 78: break;
          case 3: 
            { return DEC_INT;
            } 
            // fall through
          case 79: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 80: break;
          case 5: 
            { return VARNAME;
            } 
            // fall through
          case 81: break;
          case 6: 
            { return STRING;
            } 
            // fall through
          case 82: break;
          case 7: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 83: break;
          case 8: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 84: break;
          case 9: 
            { return KEYWORDIN;
            } 
            // fall through
          case 85: break;
          case 10: 
            { return KEYWORDIF;
            } 
            // fall through
          case 86: break;
          case 11: 
            { return KEYWORDBIT;
            } 
            // fall through
          case 87: break;
          case 12: 
            { return KEYWORDDEF;
            } 
            // fall through
          case 88: break;
          case 13: 
            { return KEYWORDDAG;
            } 
            // fall through
          case 89: break;
          case 14: 
            { return KEYWORDLET;
            } 
            // fall through
          case 90: break;
          case 15: 
            { return KEYWORDINT;
            } 
            // fall through
          case 91: break;
          case 16: 
            { return BANGNE;
            } 
            // fall through
          case 92: break;
          case 17: 
            { return BANGEQ;
            } 
            // fall through
          case 93: break;
          case 18: 
            { return BANGLE;
            } 
            // fall through
          case 94: break;
          case 19: 
            { return BANGLT;
            } 
            // fall through
          case 95: break;
          case 20: 
            { return BANGIF;
            } 
            // fall through
          case 96: break;
          case 21: 
            { return BANGOR;
            } 
            // fall through
          case 97: break;
          case 22: 
            { return BANGGE;
            } 
            // fall through
          case 98: break;
          case 23: 
            { return BANGGT;
            } 
            // fall through
          case 99: break;
          case 24: 
            { return KEYWORDBITS;
            } 
            // fall through
          case 100: break;
          case 25: 
            { return CODE_FRAGMENT;
            } 
            // fall through
          case 101: break;
          case 26: 
            { return KEYWORDDEFM;
            } 
            // fall through
          case 102: break;
          case 27: 
            { return KEYWORDELSE;
            } 
            // fall through
          case 103: break;
          case 28: 
            { return KEYWORDLIST;
            } 
            // fall through
          case 104: break;
          case 29: 
            { return KEYWORDTHEN;
            } 
            // fall through
          case 105: break;
          case 30: 
            { return KEYWORDCODE;
            } 
            // fall through
          case 106: break;
          case 31: 
            { return BANGXOR;
            } 
            // fall through
          case 107: break;
          case 32: 
            { return BANGNOT;
            } 
            // fall through
          case 108: break;
          case 33: 
            { return BANGDIV;
            } 
            // fall through
          case 109: break;
          case 34: 
            { return BANGDAG;
            } 
            // fall through
          case 110: break;
          case 35: 
            { return BANGISA;
            } 
            // fall through
          case 111: break;
          case 36: 
            { return BANGCON;
            } 
            // fall through
          case 112: break;
          case 37: 
            { return BANGAND;
            } 
            // fall through
          case 113: break;
          case 38: 
            { return BANGADD;
            } 
            // fall through
          case 114: break;
          case 39: 
            { return BANGMUL;
            } 
            // fall through
          case 115: break;
          case 40: 
            { return BANGSUB;
            } 
            // fall through
          case 116: break;
          case 41: 
            { return BANGSRL;
            } 
            // fall through
          case 117: break;
          case 42: 
            { return BANGSRA;
            } 
            // fall through
          case 118: break;
          case 43: 
            { return BANGSHL;
            } 
            // fall through
          case 119: break;
          case 44: 
            { return KEYWORDFIELD;
            } 
            // fall through
          case 120: break;
          case 45: 
            { return KEYWORDCLASS;
            } 
            // fall through
          case 121: break;
          case 46: 
            { return BANGFIND;
            } 
            // fall through
          case 122: break;
          case 47: 
            { return BANGTAIL;
            } 
            // fall through
          case 123: break;
          case 48: 
            { return CONDITION;
            } 
            // fall through
          case 124: break;
          case 49: 
            { return BANGCAST;
            } 
            // fall through
          case 125: break;
          case 50: 
            { return BANGHEAD;
            } 
            // fall through
          case 126: break;
          case 51: 
            { return BANGSIZE;
            } 
            // fall through
          case 127: break;
          case 52: 
            { return KEYWORDDEFSET;
            } 
            // fall through
          case 128: break;
          case 53: 
            { return KEYWORDDEFVAR;
            } 
            // fall through
          case 129: break;
          case 54: 
            { return KEYWORDSTRING;
            } 
            // fall through
          case 130: break;
          case 55: 
            { return BANGEMPTY;
            } 
            // fall through
          case 131: break;
          case 56: 
            { return BANGFOLDL;
            } 
            // fall through
          case 132: break;
          case 57: 
            { return BANGRANGE;
            } 
            // fall through
          case 133: break;
          case 58: 
            { return BANGSUBST;
            } 
            // fall through
          case 134: break;
          case 59: 
            { return KEYWORDFOREACH;
            } 
            // fall through
          case 135: break;
          case 60: 
            { return KEYWORDINCLUDE;
            } 
            // fall through
          case 136: break;
          case 61: 
            { return BANGEXISTS;
            } 
            // fall through
          case 137: break;
          case 62: 
            { return BANGFILTER;
            } 
            // fall through
          case 138: break;
          case 63: 
            { return BANGLOGTWO;
            } 
            // fall through
          case 139: break;
          case 64: 
            { return BANGSUBSTR;
            } 
            // fall through
          case 140: break;
          case 65: 
            { return BANGFOREACH;
            } 
            // fall through
          case 141: break;
          case 66: 
            { return BANGTOLOWER;
            } 
            // fall through
          case 142: break;
          case 67: 
            { return BANGTOUPPER;
            } 
            // fall through
          case 143: break;
          case 68: 
            { return BANGGETDAGOP;
            } 
            // fall through
          case 144: break;
          case 69: 
            { return BANGSETDAGOP;
            } 
            // fall through
          case 145: break;
          case 70: 
            { return KEYWORDMULTICLASS;
            } 
            // fall through
          case 146: break;
          case 71: 
            { return BANGLISTSPLAT;
            } 
            // fall through
          case 147: break;
          case 72: 
            { return BANGSTRCONCAT;
            } 
            // fall through
          case 148: break;
          case 73: 
            { return BANGLISTCONCAT;
            } 
            // fall through
          case 149: break;
          case 74: 
            { return BANGLISTREMOVE;
            } 
            // fall through
          case 150: break;
          case 75: 
            { return BANGINTERLEAVE;
            } 
            // fall through
          case 151: break;
          case 76: 
            { return KEYWORDASSERT;
            } 
            // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
